diff --git a/CategoriesPanel.c b/CategoriesPanel.c
index bf6ee54..8c1f59c 100644
--- a/CategoriesPanel.c
+++ b/CategoriesPanel.c
@@ -88,10 +88,14 @@ static HandlerResult CategoriesPanel_eventHandler(Panel* super, int ch) {
          break;
       case KEY_UP:
       case KEY_CTRLP:
+      case 'u':
       case KEY_DOWN:
+      case 'e':
       case KEY_CTRLN:
       case KEY_NPAGE:
+      case 'E':
       case KEY_PPAGE:
+      case 'U':
       case KEY_HOME:
       case KEY_END: {
          int previous = selected;
diff --git a/Panel.c b/Panel.c
index 4355b1e..0b33e54 100644
--- a/Panel.c
+++ b/Panel.c
@@ -348,11 +348,13 @@ bool Panel_onKey(Panel* this, int key) {
    switch (key) {
    case KEY_DOWN:
    case KEY_CTRLN:
+   case 'e':
       if (this->selected + 1 < Vector_size(this->items))
          this->selected++;
       return true;
    case KEY_UP:
    case KEY_CTRLP:
+   case 'u':
       if (this->selected > 0)
          this->selected--;
       return true;
@@ -380,17 +382,20 @@ bool Panel_onKey(Panel* this, int key) {
    #endif
    case KEY_LEFT:
    case KEY_CTRLB:
+   case 'h':
       if (this->scrollH > 0) {
          this->scrollH -= CRT_scrollHAmount;
          this->needsRedraw = true;
       }
       return true;
+   case 't':
    case KEY_RIGHT:
    case KEY_CTRLF:
       this->scrollH += CRT_scrollHAmount;
       this->needsRedraw = true;
       return true;
    case KEY_PPAGE:
+   case 'U':
       this->selected -= (this->h - 1);
       this->scrollV -= (this->h - 1);
       if (this->selected < 0)
@@ -400,6 +405,7 @@ bool Panel_onKey(Panel* this, int key) {
       this->needsRedraw = true;
       return true;
    case KEY_NPAGE:
+   case 'E':
       this->selected += (this->h - 1);
       int size = Vector_size(this->items);
       if (this->selected < 0)
@@ -412,9 +418,11 @@ bool Panel_onKey(Panel* this, int key) {
       this->needsRedraw = true;
       return true;
    case KEY_HOME:
+   case 'g':
       this->selected = 0;
       return true;
    case KEY_END:
+   case 'G':
       this->selected = Vector_size(this->items) - 1;
       return true;
    }
diff --git a/ScreenManager.c b/ScreenManager.c
index 646ee2f..bf47ca9 100644
--- a/ScreenManager.c
+++ b/ScreenManager.c
@@ -205,6 +205,7 @@ void ScreenManager_run(ScreenManager* this, Panel** lastFocus, int* lastKey) {
       }
       case KEY_LEFT:
       case KEY_CTRLB:
+      case 'h':
          if (!this->allowFocusChange)
             break;
          tryLeft:
@@ -216,6 +217,7 @@ void ScreenManager_run(ScreenManager* this, Panel** lastFocus, int* lastKey) {
          break;
       case KEY_RIGHT:
       case KEY_CTRLF:
+      case 't':
       case 9:
          if (!this->allowFocusChange)
             break;
diff --git a/htop.c b/htop.c
index aee07c0..c0dcd0e 100644
--- a/htop.c
+++ b/htop.c
@@ -661,7 +661,7 @@ int main(int argc, char** argv) {
          setSortKey(pl, defaultBar, PERCENT_MEM, panel, settings);
          break;
       }
-      case 'T':
+      case 'r':
       {
          refreshTimeout = 0;
          setSortKey(pl, defaultBar, TIME, panel, settings);
@@ -674,7 +674,7 @@ int main(int argc, char** argv) {
          tagAllChildren(panel, p);
          break;
       }
-      case 'U':
+      case 'x':
       {
          for (int i = 0; i < Panel_size(panel); i++) {
             Process* p = (Process*) Panel_get(panel, i);
@@ -690,7 +690,6 @@ int main(int argc, char** argv) {
          break;
       }
       case KEY_F(1):
-      case 'h':
       case '?':
       {
          showHelp(pl);
@@ -759,7 +758,7 @@ int main(int argc, char** argv) {
          follow = true;
          continue;
       }
-      case 'u':
+      case 'L':
       {
          Panel* usersPanel = Panel_new(0, 0, 0, 0, true, Class(ListItem));
          Panel_setHeader(usersPanel, "Show processes of:");
@@ -911,7 +910,7 @@ int main(int argc, char** argv) {
          refreshTimeout = 0;
          doRefresh = true;
          continue;
-      case 't':
+      case 'T':
       case KEY_F(5):
          refreshTimeout = 0;
          collapsed = false;
